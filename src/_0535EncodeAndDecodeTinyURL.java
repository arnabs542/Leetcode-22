import java.util.HashMap;
import java.util.Map;
import java.util.Random;

/**
 * Summary: https://leetcode.com/problems/encode-and-decode-tinyurl/solution/
 */
public class _0535EncodeAndDecodeTinyURL {
    /**
     * 1. HashTable
     *
     * String hashCode() returns int
     * s[0]*31^(n - 1) + s[1]*31^(n - 2) + ... + s[n - 1]
     *
     * The number of URLs that can be encoded is limited by the range of int (hashCode uses integer calculations)
     *
     * The average length of the encoded URL isn't directly related to the incoming longURL length.
     *
     * The hashCode() doesn't generate unique codes for different string.
     * This property of getting the same code for two different inputs is called collision.
     * as the number of encoded URLs increases, the probability of collisions increases
     *
     * Predicting the encoded URL isn't easy in this scheme.
     *
     * encode and decode: O(len)
     */
    Map<Integer, String> map = new HashMap<>();

    public String encode(String longUrl) {
        map.put(longUrl.hashCode(), longUrl);
        return "http://tinyurl.com/" + longUrl.hashCode();
    }

    public String decode(String shortUrl) {
        return map.get(Integer.parseInt(shortUrl.replace("http://tinyurl.com/", "")));
    }

    /**
     * 2. Random Number
     *
     * Almost same as #1, but map's key is generated by random
     *
     * The average length of the codes generated is independent of the longURL's length, since a random integer is used.
     */

    /**
     * 5. Random fixed-length encoding
     *
     * 1. large capacity ~ (10 + 26 * 2) ^ 6
     * 2. Fixed 6 units -> avoid large url
     * 3. Good performance because of lower probability of repeated code
     * 4. We can increase the number of encodings possible by increasing the length of the encoded strings.
     * Thus, there exists a tradeoff between the length of the code and the number of encodings possible.
     *
     */
    String alphabet = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    HashMap<String, String> map2 = new HashMap<>();
    Random rand = new Random();
    String key = getRand();

    public String getRand() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 6; i++) {
            sb.append(alphabet.charAt(rand.nextInt(62)));
        }
        return sb.toString();
    }

    public String encode2(String longUrl) {
        while (map2.containsKey(key)) {
            key = getRand();
        }
        map2.put(key, longUrl);
        return "http://tinyurl.com/" + key;
    }

    public String decode2(String shortUrl) {
        return map2.get(shortUrl.replace("http://tinyurl.com/", ""));
    }

}
